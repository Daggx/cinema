# Generated by Django 4.2 on 2025-08-24 21:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('role', models.CharField(choices=[('AUTHOR', 'Author'), ('SPECTATOR', 'Spectator')], default='SPECTATOR', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('password', models.CharField(error_messages={'max_length': 'Your password cannot exceed 200 characters.', 'required': 'Please enter your password'}, max_length=200, validators=[django.core.validators.RegexValidator('^(?=.*\\d).{8,}$', 'Your password must contain at least eight characters, one number and one letter.')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=2000)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('statut', models.CharField(choices=[('DRAFT', 'Draft'), ('RELEASED', 'Released'), ('ARCHIVED', 'Archived')], default='RELEASED', max_length=20)),
                ('tmdb_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('budget', models.BigIntegerField(blank=True, null=True)),
                ('revenue', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='author', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('popularity', models.FloatField(default=0.0)),
                ('tmdb_id', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('death_date', models.DateField(blank=True, null=True)),
                ('gender', models.IntegerField(choices=[(0, 'Not Specified'), (1, 'Female'), (2, 'Male'), (3, 'Non Binary')], default=0)),
                ('department', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Spectator',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='spectator', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bio', models.TextField(blank=True, null=True)),
                ('favorite_authors', models.ManyToManyField(blank=True, related_name='favorite_authors', to='cinema.author')),
                ('favorite_films', models.ManyToManyField(blank=True, related_name='favorite_films', to='cinema.film')),
            ],
        ),
        migrations.CreateModel(
            name='FilmRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='cinema.film')),
                ('spectator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_film', to='cinema.spectator')),
            ],
        ),
        migrations.AddField(
            model_name='film',
            name='authors',
            field=models.ManyToManyField(blank=True, related_name='authors_films', to='cinema.author'),
        ),
        migrations.CreateModel(
            name='AuthorRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.author')),
                ('spectator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.spectator')),
            ],
        ),
    ]
